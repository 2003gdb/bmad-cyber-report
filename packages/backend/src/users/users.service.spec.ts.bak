
import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';
import { UsersRepository, User } from './users.repository';
import * as hashUtil from '../util/hash/hash.util';

// Mock the hash utility module
jest.mock('../util/hash/hash.util');

describe('UsersService', () => {
    let service: UsersService;
    let repository: UsersRepository;

    const mockUser: User = {
        id: 1,
        email: 'test@example.com',
        name: 'Test User',
        pass_hash: 'hashed_password',
        salt: 'unique_salt',
        created_at: new Date(),
        updated_at: new Date()
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [
                UsersService,
                {
                    provide: UsersRepository,
                    useValue: {
                        createUser: jest.fn(),
                        findById: jest.fn(),
                        findByEmail: jest.fn(),
                        findAll: jest.fn(),
                        updateUser: jest.fn(),
                        deleteUser: jest.fn(),
                    },
                },
            ],
        }).compile();

        service = module.get<UsersService>(UsersService);
        repository = module.get<UsersRepository>(UsersRepository);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    it('should be defined', () => {
        expect(service).toBeDefined();
    });

    describe('createUser', () => {
        it('should create user with hashed password and unique salt', async () => {
            const email = 'test@example.com';
            const name = 'Test User';
            const password = 'plainPassword123';
            const mockSalt = 'generated_salt';
            const mockHashedPassword = 'hashed_password';

            jest.spyOn(hashUtil, 'generateSalt').mockReturnValue(mockSalt);
            jest.spyOn(hashUtil, 'hashPassword').mockResolvedValue(mockHashedPassword);
            jest.spyOn(repository, 'createUser').mockResolvedValue(mockUser);

            const result = await service.createUser(email, name, password);

            expect(hashUtil.generateSalt).toHaveBeenCalled();
            expect(hashUtil.hashPassword).toHaveBeenCalledWith(password, mockSalt);
            expect(repository.createUser).toHaveBeenCalledWith(email, name, mockHashedPassword, mockSalt);
            expect(result).toEqual(mockUser);
        });

        it('should return null if repository creation fails', async () => {
            const email = 'test@example.com';
            const name = 'Test User';
            const password = 'plainPassword123';

            jest.spyOn(hashUtil, 'generateSalt').mockReturnValue('salt');
            jest.spyOn(hashUtil, 'hashPassword').mockResolvedValue('hash');
            jest.spyOn(repository, 'createUser').mockResolvedValue(null);

            const result = await service.createUser(email, name, password);

            expect(result).toBeNull();
        });
    });

    describe('validateUser', () => {
        it('should return user for valid credentials', async () => {
            const email = 'test@example.com';
            const password = 'plainPassword123';

            jest.spyOn(repository, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(hashUtil, 'verifyPassword').mockResolvedValue(true);

            const result = await service.validateUser(email, password);

            expect(repository.findByEmail).toHaveBeenCalledWith(email);
            expect(hashUtil.verifyPassword).toHaveBeenCalledWith(password, mockUser.salt, mockUser.pass_hash);
            expect(result).toEqual(mockUser);
        });

        it('should return null for non-existent user', async () => {
            const email = 'nonexistent@example.com';
            const password = 'plainPassword123';

            jest.spyOn(repository, 'findByEmail').mockResolvedValue(null);

            const result = await service.validateUser(email, password);

            expect(repository.findByEmail).toHaveBeenCalledWith(email);
            expect(hashUtil.verifyPassword).not.toHaveBeenCalled();
            expect(result).toBeNull();
        });

        it('should return null for invalid password', async () => {
            const email = 'test@example.com';
            const password = 'wrongPassword';

            jest.spyOn(repository, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(hashUtil, 'verifyPassword').mockResolvedValue(false);

            const result = await service.validateUser(email, password);

            expect(repository.findByEmail).toHaveBeenCalledWith(email);
            expect(hashUtil.verifyPassword).toHaveBeenCalledWith(password, mockUser.salt, mockUser.pass_hash);
            expect(result).toBeNull();
        });
    });

    describe('findById', () => {
        it('should return user by id', async () => {
            const userId = 1;
            jest.spyOn(repository, 'findById').mockResolvedValue(mockUser);

            const result = await service.findById(userId);

            expect(repository.findById).toHaveBeenCalledWith(userId);
            expect(result).toEqual(mockUser);
        });

        it('should return null if user not found', async () => {
            const userId = 999;
            jest.spyOn(repository, 'findById').mockResolvedValue(null);

            const result = await service.findById(userId);

            expect(repository.findById).toHaveBeenCalledWith(userId);
            expect(result).toBeNull();
        });
    });

    describe('findByEmail', () => {
        it('should return user by email', async () => {
            const email = 'test@example.com';
            jest.spyOn(repository, 'findByEmail').mockResolvedValue(mockUser);

            const result = await service.findByEmail(email);

            expect(repository.findByEmail).toHaveBeenCalledWith(email);
            expect(result).toEqual(mockUser);
        });
    });


    describe('updateUser', () => {
        it('should update user information', async () => {
            const userId = 1;
            const updates = { name: 'Updated Name', email: 'updated@example.com' };
            const updatedUser = { ...mockUser, ...updates };

            jest.spyOn(repository, 'updateUser').mockResolvedValue(updatedUser);

            const result = await service.updateUser(userId, updates);

            expect(repository.updateUser).toHaveBeenCalledWith(userId, updates);
            expect(result).toEqual(updatedUser);
        });
    });

    describe('deleteUser', () => {
        it('should delete user successfully', async () => {
            const userId = 1;
            jest.spyOn(repository, 'deleteUser').mockResolvedValue(true);

            const result = await service.deleteUser(userId);

            expect(repository.deleteUser).toHaveBeenCalledWith(userId);
            expect(result).toBe(true);
        });

        it('should return false if deletion fails', async () => {
            const userId = 999;
            jest.spyOn(repository, 'deleteUser').mockResolvedValue(false);

            const result = await service.deleteUser(userId);

            expect(repository.deleteUser).toHaveBeenCalledWith(userId);
            expect(result).toBe(false);
        });
    });
});